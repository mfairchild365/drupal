<?php

class UnlTestCase extends DrupalWebTestCase {
  protected $site_admin;

  public static function getInfo() {
    // Note: getInfo() strings are not translated with t().
    return array(
      'name' => 'Create a Basic page',
      'description' => 'Ensure that a Site Admin can create and edit a Basic page.',
      'group' => 'UNL',
    );
  }

  /**
   * Override since the unl module puts the user page into Seven without a 'Log out' link.
   * @see DrupalWebTestCase::drupalLogin()
   */
  protected function drupalLogin(stdClass $user) {
    if ($this->loggedInUser) {
      $this->drupalLogout();
    }

    $edit = array(
      'name' => $user->name,
      'pass' => $user->pass_raw
    );
    $this->drupalPost('user', $edit, t('Log in'));

    // If a "edit" link appears on the page, it is almost certainly because
    // the login was successful.
    $pass = $this->assertLink(t('Edit'), 0, t('2User %name successfully logged in.', array('%name' => $user->name)), t('User login'));

    if ($pass) {
      $this->loggedInUser = $user;
    }
  }

  public function setUp() {
    // Enable any modules required for the test
    parent::setUp('unl');
    // Create and log in our privileged user.
    $this->site_admin = $this->drupalCreateUser(array(
      'access content',
      'create page content',
      'bypass node access',
      'administer content types',
      'administer nodes',
    ));
    $this->drupalLogin($this->site_admin);
  }

  public function testUnlCreate() {
    // Create node to edit.
    $edit = array();
    $edit['title'] = $this->randomName(8);
    $edit["body[und][0][value]"] = $this->randomName(16);
    $this->drupalPost('node/add/page', $edit, t('Save'));
    $this->assertText(t('Basic page @title has been created.', array('@title' => $edit['title'])));
  }

  // Create a simpletest_example node and then see if our user can edit it
  public function testUnlEdit() {
    $settings = array(
      'type' => 'page',
      'title' => $this->randomName(32),
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(64)))),
    );
    $node = $this->drupalCreateNode($settings);

    // For debugging, we might output the node structure with $this->verbose()
    $this->verbose('Node created: ' . var_export($node, TRUE));
    // It would only be output if the testing settings had 'verbose' set.

    // We'll run this test normally, but not on the testbot, as it would
    // indicate that the examples module was failing tests.
    if (!$this->runningOnTestbot()) {
      // The debug() statement will output information into the test results.
      // It can also be used in Drupal 7 anywhere in code and will come out
      // as a drupal_set_message().
      debug('We are not running on the PIFR testing server, so will go ahead and catch the failure.');
      $this->drupalGet("node/{$node->nid}/edit");
      // Make sure we don't get a 401 unauthorized response:
      $this->assertResponse(200, t('User is allowed to edit the content.'));

      // Looking for title text in the page to determine whether we were
      // successful opening edit form.
      $this->assertText(t("@title", array('@title' => $settings['title'])), "Found title in edit form");
    }
  }

  public function runningOnTestbot() {
    return (file_exists("../checkout") || file_exists("../site_under_test"));
  }
}
