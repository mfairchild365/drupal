<?php

/**
 * @file
 * Test file for Workbench Access.
 */

class WorkbenchAccessTestCase extends DrupalWebTestCase {
  protected $user_list;
  protected $editor_role;

  public static function getInfo() {
    return array(
      'name' => 'Workbench access controls',
      'description' => 'Test access control rules for Workbench Access.',
      'group' => 'Workbench Access'
    );
  }

  function setUp() {
    parent::setUp('workbench_access');
    // Add an editor role.
    $permissions = array(
      'access content',
      'create page content',
      'edit any page content',
      'delete any page content',
      'access workbench access by role',
    );

    $this->editor_role = $this->drupalCreateRole($permissions);

    // Create some nodes and users.
    for ($i = 0; $i < 10; $i++) {
      $settings = array(
        'type' => 'page',
        'title' => $this->randomName(32),
        'body' => array(LANGUAGE_NONE => array(array($this->randomName(64)))),
      );
      $this->drupalCreateNode($settings);
      // Using drupalCreateUser runs tests we don't want.
      $edit = array(
        'name' => $this->randomName(32),
        'mail' => $this->randomName(32) . '@example.com',
        'roles' => drupal_map_assoc(array(DRUPAL_AUTHENTICATED_RID, $this->editor_role)),
        'status' => 1,
      );
      $this->user_list[] = user_save(NULL, $edit);
    }
  }

  // Base test for installation.
  function testWorkbenchAccess() {
    // Check for user creation.
    $this->assertTrue(count($this->user_list) == 10, t('Ten new users were created.'));
    $this->assertTrue(!empty($this->editor_role), t('Created edtior role.'));
    // Check for node creation.
    $count = db_query("SELECT COUNT(n.nid) FROM {node} n")->fetchField();
    $this->assertTrue($count == 10, t('Ten initial nodes created.'));
    $nid = db_query_range("SELECT n.nid FROM {node} n INNER JOIN {workbench_access_node} wan ON n.nid = wan.nid", 0, 1)->fetchField();
    $this->assertTrue(empty($nid), t('Initial nodes have no access data.'));
    // Create the taxonomy test scheme.
    module_load_include('inc', 'workbench_access', 'admin');
    workbench_access_example_taxonomy();
    $count = db_query("SELECT COUNT(n.nid) FROM {node} n INNER JOIN {workbench_access_node} wan ON n.nid = wan.nid")->fetchField();
    $this->assertTrue($count == 10, t('Initial nodes assigned access data.'));
    // Check that the vocabulary is setup correctly.
    workbench_access_reset_tree();
    $active = workbench_access_get_active_tree();
    $this->assertTrue(!empty($active['access_scheme']), t('Active access scheme set.'));
    $this->assertTrue(!empty($active['tree']), t('Active access tree set.'));
    $this->assertTrue(!empty($active['active']), t('Active access sections set.'));
    $this->assertTrue($active['access_scheme']['access_scheme'] == 'taxonomy', t('Using taxonomy access scheme.'));
    $this->assertTrue(isset($active['access_scheme']['access_type_id']['workbench_access']), t('Using Workbench Access test vocabulary.'));
    $this->assertTrue(isset($active['tree']['workbench_access']), t('Vocabulary tree returned correctly.'));
    // Check that nodes have been assigned to the top-level item.
    $count = db_query("SELECT COUNT(n.nid) FROM {node} n INNER JOIN {workbench_access_node} wan ON n.nid = wan.nid WHERE wan.access_id = 'workbench_access' AND wan.access_scheme = 'taxonomy'")->fetchField();
    $this->assertTrue($count == 10, t('Initial nodes assigned to top-level hierarchy.'));
    // Test access settings of user 1.
    $account = user_load(1);
    $this->assertTrue(!empty($account->workbench_access['workbench_access']), t('User 1 assigned to top-level hierarchy.'));
    // End setup tests.
    
    // Assign a user to a section and check permissions.
    // This is a multi-step check. 
    // First, the user should not be able to do anything (Create, Update or Delete).
    $id = array_rand($this->user_list);
    $account = $this->user_list[$id];
    $this->assertTrue(empty($account->workbench_access['workbench_access']), t('Test user not assigned to a section.'));
    $nids = db_query("SELECT nid FROM {node}")->fetchAllAssoc('nid');
    $nodes = node_load_multiple(array_keys($nids));
    $assigned = TRUE;
    foreach ($nodes as $node) {
      if (!isset($node->workbench_access['workbench_access'])) {
        $assigned = FALSE;
      }
    }
    $this->assertTrue(!empty($assigned), t('All nodes properly assigned.'));
    $actions = array('create', 'update', 'delete');
    foreach ($actions as $action) {
      foreach ($nodes as $node) {
        $status[$action] = FALSE;
        if ($action == 'create') {
          $result = node_access($action, $node->type, $account);
        }
        else {
          $result = node_access($action, $node, $account);
        }
        if ($result) {
          $status[$action] = TRUE;
          break;
        }
      }
      $this->assertTrue(empty($status[$action]), t('Test user cannot @action content.', array('@action' => $action)));
    }
    // Now, we assign the user to a section and check again.
    drupal_static_reset('node_access');
    workbench_access_user_section_save($account->uid, 'workbench_access', $active['access_scheme']['access_scheme']);
    $account = user_load($account->uid, TRUE);
    $this->assertTrue(!empty($account->workbench_access['workbench_access']), t('Test user assigned to top-level hierarchy.'));
    foreach ($actions as $action) {
      foreach ($nodes as $node) {
        $status[$action] = TRUE;
        if ($action == 'create') {
          $result = node_access($action, $node->type, $account);
        }
        else {
          $result = node_access($action, $node, $account);
        }
        if (!$result) {
          $status[$action] = FALSE;
          break;
        }
      }
      $this->assertTrue(!empty($status[$action]), t('Test user can now @action content.', array('@action' => $action)));
    }
    // Remove the permission to 'access workbench access by role' and check again.
    user_role_revoke_permissions($this->editor_role, array('access workbench access by role'));
    $account = user_load($account->uid, TRUE);
    $this->assertTrue(empty($account->workbench_access['workbench_access']), t('Permission revoked and test user not assigned to a section.'));
    // Now give them permissions again.
    user_role_grant_permissions($this->editor_role, array('access workbench access by role'));
    $account = user_load($account->uid, TRUE);
    $this->assertTrue(!empty($account->workbench_access['workbench_access']), t('Permission reinstated and test user assigned to a section.'));

  }

}
