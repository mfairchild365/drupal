<?php

/*
 * @file
 * Provides an action to email all users in selected role(s)
 */

/**
 * Implementation of hook_action_info().
 */
function action_email_role_action_info() {
  return array(
    'action_email_role_send_email_action' => array(
      'label' => t('Send e-mail to all users in specified role(s)'),
      'type' => 'system',
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Return a form definition so the Send e-mail action can be configured.
 *
 * @see action_email_role_send_email_action_submit()
 * @param $context
 *   Default values (if we are editing an existing action instance).
 * @return
 *   Form definition.
 */
function action_email_role_send_email_action_form($context) {
  // Set default values for form
  if (!isset($context['sender_email'])) {
    $context['sender_email'] = 0;
  }
  if (!isset($context['recipient'])) {
    $context['recipient'] = array();
  }
  if (!isset($context['subject'])) {
    $context['subject'] = '';
  }
  if (!isset($context['message'])) {
    $context['message'] = '';
  }

  $form['sender_email'] = array(
    '#type' => 'checkbox',
    '#title' => t("Send from user's e-mail"),
    '#default_value' => $context['sender_email'],
    '#description' => t('Change the FROM field to the e-mail of the user that caused the trigger. For example, the user that caused the workflow state change. Otherwise the e-mail will be FROM the <a href="@url">e-mail address specified in Site Information</a>.', array('@url' => url('admin/config/system/site-information'))),
    '#required' => FALSE,
  );

  // Roles checkboxes
  // @TODO: make ability to email administrator configurable/permission based
  $roles = user_roles(TRUE);

  $form['recipient'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Recipient Roles'),
    '#default_value' => $context['recipient'],
    '#options' => $roles,
    '#description' => t('Select the role(s) you would like to e-mail. Selecting the authenticated role may cause problems if your site has more than a few dozen users.'),
    '#required' => TRUE,
  );

  // Message components
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $context['subject'],
    '#maxlength' => '254',
    '#description' => t('The subject of the message.'),
    '#required' => TRUE,
  );

  $variables = '%site_name, %sender, %recipient, %uid, %node_url, %node_type, %title, %summary, %body';
  $description = t('The message that should be sent. You may include the following variables: %variables. Not all variables will be available in all contexts.', array('%variables'=>$variables)) ;
  if (module_exists('token')) {
    $description .= "<br />". t('You may also use the tokens under "Replacement patterns" below where that token context is related to the trigger.');
  }

  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#default_value' => $context['message'],
    '#cols' => '50',
    '#rows' => '20',
    '#description' => $description,
    '#required' => TRUE,
  );

  // Display the user documentation of placeholders supported by
  // this module, as a description on the last pattern
  $form['token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Use -raw replacements for text to avoid problems with HTML entities.'),
  );
  $form['token_help']['help'] = array(
    '#theme' => 'token_tree',
    '#token_types' => 'all',
  );

  // Specific node settings
  if (!isset($context['node_types_set'])) {
    $context['node_types_set'] = 'all';
  }
  if (!isset($context['node_types_selected'])) {
    $context['node_types_selected'] = array();
  }

  $node_types = node_type_get_types();
  foreach ($node_types as $key => $val) {
    $node_types[$key] = $val->name;
  }

  $form['node_types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Send notification for specific node types'),
    '#collapsible' => TRUE,
    '#collapsed' => ($context['node_types_set'] == 'all'),
  );

  $form['node_types']['node_types_set'] = array(
    '#type' => 'radios',
    '#title' => t('Perform action for'),
    '#options' => array(
      'all' => t('all node types'),
      'selected' => t('selected node types (below)'),
    ),
    '#default_value' => $context['node_types_set'],
    '#required' => TRUE,
  );

  $description = t('Select the node types this action should affect.') ;
  if (module_exists('trigger')) {
    $description .= ' ' . t('Will only apply if action is attached to a <a href="@url">node trigger</a>.', array('@url' => url('admin/structure/trigger/node')));
  }
  $form['node_types']['node_types_selected'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Node types'),
    '#default_value' => $context['node_types_selected'],
    '#options' => $node_types,
    '#description' => $description,
  );

  return $form;
}

/**
 * Process action_email_role_send_email_action_form submissions.
 */
function action_email_role_send_email_action_submit($form, &$form_state) {
  // Process the HTML form to store configuration. The keyed array that
  // we return will be serialized to the database.
  $params = array(
    'sender_email' => $form_state['values']['sender_email'],
    'recipient' => $form_state['values']['recipient'],
    'subject' => $form_state['values']['subject'],
    'message' => $form_state['values']['message'],
  );
  if (isset($form_state['values']['node_types_set'])) {
    $params['node_types_set'] = $form_state['values']['node_types_set'];
  }
  if (isset($form_state['values']['node_types_selected'])) {
    $params['node_types_selected'] = $form_state['values']['node_types_selected'];
  }

  return $params;
}

/**
 * Implementation of a configurable Drupal action. Sends an email to specified role(s).
 * @param $entity will always (?) be null as this is a 'system' action
 */
function action_email_role_send_email_action($entity, $context) {
    if ($context['group'] != 'node' || $context['node_types_set'] == 'all' || $context['node_types_selected'][$context['node']->type]) {
        action_email_role_send_email_to_roles($context);
    }
}

/**
 * Actual worker for sending the email
 * @param action/trigger $context
 */
function action_email_role_send_email_to_roles($context) {
  global $user;
  $params['sender'] = $user;

  // Decide based on sender_email checkbox whether to send from person who triggered action or site e-mail address
  $from = ($context['sender_email'] == 1) ? $params['sender']->mail : variable_get('site_mail', ini_get('sendmail_from'));

  if (module_exists('token')) {
    $context['subject'] = str_replace(array("\r", "\n"), '', token_replace($context['subject'], $context));
    $context['message'] = token_replace($context['message'], $context);
  }

  $params['context'] = $context;

  // $context['recipient'] is an array with a key matching each role rid
  // Roles selected to send the e-mail to will have a value, otherwise the value is 0
  foreach ($context['recipient'] as $rid => $value) {
    if (!empty($value)) {
      $roles[] = $rid;
    }
  }

  $emailed = 0;
  $recipients = action_email_role_get_role_accounts($roles);
  foreach ($recipients as $account) {
    $params['recipient'] = $account;
    if (drupal_mail('action_email_role', 'email_roles', $account->mail, user_preferred_language($account), $params, $from)) {
      watchdog('action_email_role', 'Sent email to %recipient', array('%recipient' => $account->mail));
      $emailed++;
    }
    else {
      watchdog('action_email_role', 'Unable to send email to %recipient from action_email_role', array('%recipient' => $account->mail), WATCHDOG_ERROR);
    }
  }
  watchdog('action_email_role', "!emailed users emailed successfuly.", array('!emailed' => $emailed));
}

/**
 * Returns array of uid, rid, mail, name for every user in the given roles
 * @param $roles array of rid values
 */
function action_email_role_get_role_accounts($roles) {
  // @TODO Probably can just check if authenticated is in $roles and if
  //     so just use that query since everyone will be in it
  $result = db_query("SELECT ur. * , u.mail, u.name FROM {users_roles} ur
                        LEFT JOIN {users} u ON ur.uid = u.uid
                        WHERE ur.rid IN (:rids) AND u.status = 1", array(':rids' => $roles));

  $accounts = array();

  foreach ($result as $account) {
    $accounts[] = $account;
  }

  // If authenticated role was specified add them as well
  if (in_array(DRUPAL_AUTHENTICATED_RID, $roles)) {
    // @TODO Does {sessions} need to be a part of this?
    $result = db_query("SELECT u.uid, u.mail, u.name FROM {users} u
                          LEFT JOIN {sessions} s ON s.uid = u.uid
                          WHERE u.uid != 0 AND u.status = 1");
    foreach ($result as $authenticated_user) {
      // Prevent users from being added twice
      foreach ($accounts as $account) {
        if ($account->uid == $authenticated_user->uid) {
          continue 2;
        }
      }
      // Cast to string to match the results from the earlier query
      $authenticated_user->rid = (string)DRUPAL_AUTHENTICATED_RID;
      $accounts[] = $authenticated_user;
    }
  }

  return $accounts;
}

/**
 * Implementation of hook_mail().
 */
function action_email_role_mail($key, &$message, $params) {
  $sender = $params['sender'];
  $recipient = $params['recipient'];
  $context = $params['context'];
  $variables = array(
    '%site_name' => variable_get('site_name', 'Drupal'),
    '%sender' => format_username($sender),
    '%recipient' => format_username($recipient),
  );

  // Node-based variable translation is only available if we have a node.
  if (isset($params['context']['node'])) {
    $node = $params['context']['node'];
    $variables += array(
      '%uid' => $node->uid,
      '%node_url' => url('node/' . $node->nid, array('absolute' => TRUE)),
      '%node_type' => node_type_get_name($node),
      '%title' => $node->title,
      '%summary' => $node->body[$node->language][0]['summary'],
      '%body' => $node->body[$node->language][0]['value'],
    );
  }
  $subject = strtr($context['subject'], $variables);
  $body = strtr($context['message'], $variables);
  $message['subject'] .= drupal_html_to_text(str_replace(array("\r", "\n"), '', $subject));
  $message['body'][] = drupal_html_to_text($body);
}
